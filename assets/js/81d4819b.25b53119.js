(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{117:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return g}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=r.a.createContext({}),o=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},u=function(e){var t=o(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=o(a),p=n,g=u["".concat(l,".").concat(p)]||u[p]||d[p]||c;return a?r.a.createElement(g,b(b({ref:t},i),{},{components:a})):r.a.createElement(g,b({ref:t},i))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=p;var b={};for(var s in t)hasOwnProperty.call(t,s)&&(b[s]=t[s]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var i=2;i<c;i++)l[i]=a[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},175:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/database-channel-01-397243c622358a12b8bdf0f511ac7d53.png"},176:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/database-channel-02-704e8fe8893355c14f73d7a5741315e8.png"},177:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/database-channel-04-3cbc09a3e4bacc6ec93b038aec085a76.png"},178:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/database-channel-05-9a7ddc679882c2328f9ac8230ded500a.png"},179:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-01-fee71999606e51ff44faa679332a8d1c.png"},180:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-02-6e47a3fdd22d23eb6a8f85def432d222.png"},181:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-03-28f26c7f585f38752d80fdd64fc5e0bc.png"},182:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-04-20eafd7e83da7448ffb2518369a2b676.png"},183:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-05-826068ef5ef0ae73acdba8a21590d4a7.png"},184:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-06-7126a184fa04e62c4988fd374c89f5c7.png"},185:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-07-33493abcaa904ac1f982e9b346fbbb97.png"},186:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-08-92fb3394af2fa6cc58dd91c9544a8e67.png"},187:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-09-bf139fee1ab5934ab7f3917123a585fd.png"},188:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/globaldatabase-channel-10-3f3b2fdd1b460abc86881ad9e7410325.png"},189:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-01-bf59c8e4adcc0f7920b10678178ddf6e.png"},190:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-02-5fc110a43fa0088811bff2ffd47ad817.png"},191:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-03-63d06a566e5fa0e8416ca7002e411a53.png"},192:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-04-1610c577da629e50830219a636b2438e.png"},193:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-05-5bea0da0a4b8a7409ae8d39dba3bdb05.png"},194:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-06-9a7ffd1c31bd73d0fecf631ad011f4d7.png"},195:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-07-c86f8ca4602a38751d5fc0e85b692e82.png"},196:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/javascript-channel-08-d6b7528dfcb0be94cfde933eed2b2b54.png"},197:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/serverinfo-01-4ed0d714e2a29c1936b726649d199eff.png"},198:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/serverinfo-02-9a1ffa403e8ceb280c2fd8178424ed9a.png"},199:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/serverinfo-03-2b7bc09cf20e8b3dedd7a23efef04e84.png"},200:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/serverinfo-04-efa3cd2528ea365b977f93e51061cd36.png"},91:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return o}));var n=a(3),r=a(7),c=(a(0),a(117)),l={title:"ViewPLUS SCADA Protocol Applications"},b={unversionedId:"ViewPLUS-SCADA-Protocol-Applications",id:"ViewPLUS-SCADA-Protocol-Applications",isDocsHomePage:!1,title:"ViewPLUS SCADA Protocol Applications",description:"Channel: Database",source:"@site/docs/ViewPLUS-SCADA-Protocol-Applications.md",slug:"/ViewPLUS-SCADA-Protocol-Applications",permalink:"/docs/ViewPLUS-SCADA-Protocol-Applications",editUrl:"https://github.com/mikrodev/Documentation/edit/master/documentation/docs/ViewPLUS-SCADA-Protocol-Applications.md",version:"current",sidebar:"docs",previous:{title:"User Manager Applications",permalink:"/docs/ViewPLUS-SCADA-User-Authorization-Applications"},next:{title:"Creating Constantly Increasing Counter Tag",permalink:"/docs/ViewPLUS-SCADA-Creating-Constantly-Increasing-Counter-Tag"}},s=[{value:"Channel: Database",id:"channel-database",children:[]},{value:"Channel: Global Database",id:"channel-global-database",children:[]},{value:"Channel: JavaScript",id:"channel-javascript",children:[]},{value:"Channel: Server Info",id:"channel-server-info",children:[]}],i={toc:s};function o(e){var t=e.components,l=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},i,l,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h3",{id:"channel-database"},"Channel: Database"),Object(c.b)("p",null,"Channel type used to make special queries from SCADA's own database."),Object(c.b)("h4",{id:"create-channels-and-tags"},"Create Channels And Tags"),Object(c.b)("p",null,"A channel is created by selecting the protocol type database in tag channel editor option."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"database-channel-01",src:a(175).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 1: Create Database Channel Screen"))))),Object(c.b)("p",null,"A label is created under the database channel."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"database-channel-02",src:a(176).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 2: Create Database Tag Screen"))))),Object(c.b)("h4",{id:"channel-and-tag-configuration"},"Channel And Tag Configuration"),Object(c.b)("p",null,"Response Timeout: The time in milliseconds that represents the frequency with which the database query is executed.\nQueries are written in the \xabQuery\xbb option of the tag"),Object(c.b)("p",null,"A tag with tag ID 2 is attached to the database and transactions are performed over the database on this tag. Values from 1 to 100 are sent and the log is kept in the database."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"database-channel-04",src:a(177).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 3: Real Tag ID"))))),Object(c.b)("h4",{id:"connection"},"Connection"),Object(c.b)("p",null,"With this query, it brings the last sent value from the database."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"database-channel-05",src:a(178).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 4: Database Tag Value and Real Tag Value"))))),Object(c.b)("h3",{id:"channel-global-database"},"Channel: Global Database"),Object(c.b)("p",null,"It is the channel type used to create special queries by connecting to different databases and to transfer these query results to project tags."),Object(c.b)("h4",{id:"postgresql-database"},"PostgreSQL Database"),Object(c.b)("h4",{id:"create-channels-and-tags-1"},"Create Channels And Tags"),Object(c.b)("p",null,"A channel is created by selecting the protocol type globaldatabase in tag channel editor option."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-01",src:a(179).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 1: Create Global Database Channel Screen"))))),Object(c.b)("p",null,"A label is created under the globaldatabase channel."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-02",src:a(180).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 2: Create Global Database Tag Screen"))))),Object(c.b)("h4",{id:"channel-and-tag-configuration-1"},"Channel And Tag Configuration"),Object(c.b)("p",null,"Information about PostgreSQL database type is entered on the channel screen.\nResponse Timeout: The time in milliseconds that represents the frequency with which the database query is executed."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-03",src:a(181).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 3: PostgreSQL Database Configuration"))))),Object(c.b)("p",null,"Queries are written in the \xabQuery\xbb option of the tag."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-04",src:a(182).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 4: Query Option of The Tag"))))),Object(c.b)("p",null,"A tag with tag ID 2 is attached to the database and transactions are performed over the database on this tag. Values from 1 to 100 are sent and the log is kept in the database."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-05",src:a(183).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 5: Real Tag ID"))))),Object(c.b)("h4",{id:"connection-1"},"Connection"),Object(c.b)("p",null,"The device address information of the label number 2 was written in the query. Device address information is displayed on the server screen."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"select deviceaddress from public.tags where tag_id=2;\n:{${1}}:\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-06",src:a(184).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 6: Query Answer-1"))))),Object(c.b)("p",null,"With this query, the last value sent from the database is set to the number 1 tag."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"select data_value from logs.tag_log where tag_id=2 order by logtime desc limit 1\n:{${1}}:\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-07",src:a(185).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 7: Query Answer-2"))))),Object(c.b)("p",null,"In the postgresql database query, the most recent values recorded in the database of the tags with id 2, 3, 4 and 5 were written in tags with ids 1, 6, 7, and 8, respectively."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"}," WITH\n t1 AS (\n  SELECT  data_value from logs.tag_log where tag_id=2 AND data_value IS NOT NULL ORDER BY logtime DESC limit 1 ),\n t2 AS (\n  SELECT  data_value from logs.tag_log where tag_id=3 AND data_value IS NOT NULL ORDER BY logtime DESC limit 1),\n t3 AS (\n  SELECT  data_value from logs.tag_log where tag_id=4 AND data_value IS NOT NULL ORDER BY logtime DESC limit 1),\n t4 AS (\n  SELECT  data_value from logs.tag_log where tag_id=5 AND data_value IS NOT NULL ORDER BY logtime DESC limit 1)\n \n SELECT t1.data_value data1, t2.data_value  data2, t3.data_value  data3, t4.data_value  data4\n FROM t1, t2 ,t3,t4;\n \n :{${1}, ${6} , ${7}, ${8}}:\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-08",src:a(186).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 8: Query Answer-3"))))),Object(c.b)("h4",{id:"oracle-database"},"Oracle Database"),Object(c.b)("p",null,"This channel is used to connect to the oracle database and pull the desired data."),Object(c.b)("h4",{id:"channel-and-tag-configuration-2"},"Channel And Tag Configuration"),Object(c.b)("p",null,"Information about Oracle database type is entered on the channel screen. The database information of the project is entered on the configuration screen."),Object(c.b)("h4",{id:"connection-2"},"Connection"),Object(c.b)("p",null,"The first data recorded in the oracle database was captured by query. The data in the Oracle database is printed on the label with ID 2."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"select data_value UNTITLED127.tag_log order by logdate fetch first 1 rows only\n:{${2}}:\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-09",src:a(187).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 9: Oracle Database Configuration"))))),Object(c.b)("p",null,"The last data recorded in the oracle database was captured by query."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"select data_value UNTITLED127.tag_log order by logdate desc fetch first 1 rows only\n:{${2}}:\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"globaldatabase-channel-09",src:a(188).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 10: Query Answer"))))),Object(c.b)("h3",{id:"channel-javascript"},"Channel: JavaScript"),Object(c.b)("p",null,'JavaScript functions could be defined JavaScript channel. You can call various Math functions in your script. You can also use the values of system tags in the form of "${123}". You need to "return" a numeric value for the function result to be written on the "JavaScript Tag".\n*Channel Parameters'),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Frame Timeout = The number of milliseconds that represents the frequency at which the\nJavaScript function is called.\n*Tag Parameters"),Object(c.b)("li",{parentName:"ul"},"Query = The JavaScript expression to be called.")),Object(c.b)("h4",{id:"create-channels-and-tags-2"},"Create Channels And Tags"),Object(c.b)("p",null,"A channel is created by selecting the protocol type javascript in tag channel editor option."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-01",src:a(189).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 1: Create JavaScript Channel Screen"))))),Object(c.b)("p",null,"A label is created under the database channel."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-02",src:a(190).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 2: Create JavaScript Tag Screen"))))),Object(c.b)("h4",{id:"channel-and-tag-configuration-3"},"Channel And Tag Configuration"),Object(c.b)("p",null,"Queries are written in the \xabQuery\xbb option of the tag."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-03",src:a(191).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 3: Query Option of The Tag"))))),Object(c.b)("p",null,"Sample javascript codes were written by choosing 2 different tags from the modbus channel."),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-04",src:a(192).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 4: Modbus Real Tags"))))),Object(c.b)("h4",{id:"connection-3"},"Connection"),Object(c.b)("p",null,"Example 1: The sum of the two labels is shown."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"var3 = ${2}+${3};\nreturn var3;\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-05",src:a(193).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 5: Query Answer-1"))))),Object(c.b)("p",null,'Example 2:\nIn the first line : define a variable "var1" and assign "the value of tag with id 2" plus "5"\nIn the second line : define a variable "var2" and assign "the value of tag with id 3" plus "3"\nIn the third line : define a variable "subtotal" and assign "the sum of var1 and var2" to it\nIn the last line : evaluate the square root of subtotal and return to that value. The return\nvalue will also be written as the value of the current JavaScript Tag.'),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"var1 = 5+${2};\nvar2 = 3+${3};\nsubtotal=(var1+var2);\nreturn Math.sqrt(subtotal);\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-06",src:a(194).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 6: Query Answer-2"))))),Object(c.b)("p",null,"Important Note = You cannot set the values of other system tags in JavaScript tag. You\nneed to use Macros to achieve this. Thus the following script will not work:\n${3}= 3 + var1;\nExample 3: Tag values are assigned to variables. Return 1 if the variables are equal.Return 0 if variables are not equal."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"var1 = ${2};\nvar2 = ${3};\nvar3 = var1===var2 ? 1:0;\nreturn var3;\n")),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-07",src:a(195).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 7: Query Answer-3"))))),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"javascript-channel-08",src:a(196).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 8: Query Answer-4"))))),Object(c.b)("h3",{id:"channel-server-info"},"Channel: Server Info"),Object(c.b)("p",null,"By using this channel, you can get real-time information such as the num-ber of active alarms, system time, etc."),Object(c.b)("p",null,'Here is a sample "JavaScript" statement to get system information:'),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'var1 = :ALARMCOUNT(Panel1); \nvar2 = :ALARMCOUNT(Panel2); \ntotalalarms_defined= (var1 +var2 );  \nreturn totalalarms_defined; // It will return the total number of alarms defined for the "Panel1" and "Panel2" alarm classes.\n')),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'The following keywords are supported in JavaScript.\n:ALARMCOUNT()              \nreturns the number of alarms defined in the system.\n:ALARMCOUNT(ClassName)     \nreturns the alarm number for the "ClassName" alarm class.\n:ACTALARMCOUNT()           \nreturns the number of active alarms defined in the system.\n:ACTALARMCOUNT(ClassName)  \nreturns the number of active alarms for the "ClassName" alarm class.\n:ACKEDALARMCOUNT()         \nreturns the number of confirmed active alarms defined in the system.\n:ACKEDALARMCOUNT(ClassName) \nreturns the number of confirmed active alarms for the "ClassName" alarm class.\n:SYSTEMTIME()              \nreturns the system time of the SCADA server in milliseconds since epoch.\n:CONNECTEDCHANNELS(ChannelName) \nreturns the number of channels with an active connection and a name containing the keyword "ChannelName".\n:UNCONNECTEDCHANNELS(ChannelName) \nreturns the number of channels that are not connected and have a name containing the keyword "ChannelName"\n')),Object(c.b)("p",null,'The channel is created by selecting the protocol type "SERVERINFO" in the Tag Channel Editor.'),Object(c.b)("p",null,Object(c.b)("img",{alt:"serverinfo-01",src:a(197).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 1: Adding Serverinfo Type Channel")))),Object(c.b)("p",null,'By writing queries within the labels created under the "SERVERINFO" channel, information related to channels and alarms can be obtained.\nAccording to the query defined below, the total number of active alarms in the project can be read on the tag.'),Object(c.b)("center",null,Object(c.b)("p",null,Object(c.b)("img",{alt:"serverinfo-02",src:a(198).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 2: Adding ActiveAlarmCount Tag by Defining Code"))))),Object(c.b)("p",null,"The total number of active alarms is displayed on the label under the de-fined \u201cSERVERINFO\u201d channel."),Object(c.b)("p",null,Object(c.b)("img",{alt:"serverinfo-03",src:a(199).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 3: Displaying Active Alarms on ViewPLUS Client")))),Object(c.b)("p",null,Object(c.b)("img",{alt:"serverinfo-04",src:a(200).default}),"\n",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},Object(c.b)("center",null,"Figure 4: Displaying Active Alarm Information by Tag Monitor on Server Engine")))))}o.isMDXComponent=!0}}]);